import logging
import os
import json
import random
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler

logging.basicConfig(level=logging.INFO)

DATA_FILE = "data.json"
TIMEZONE = ZoneInfo("Europe/Kiev")
REMINDER_HOUR = 8  # 8 —É—Ç—Ä–∞ –ø–æ –ö–∏–µ–≤—É

# –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
DEFAULT_DATA = {
    "start_date_no_iqos": "2024-06-01",
    "expenses": {},  # "YYYY-MM-DD": [{"category": str, "amount": float}]
}

# –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã
TRAINING_DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]

TRAINING_PLANS = {
    "—Å–ø–∏–Ω–∞": ["—Ç—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞", "–≥—Ä–µ–±–ª—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ", "–≥–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è"],
    "–≥—Ä—É–¥—å": ["–∂–∏–º –ª–µ–∂–∞", "—Ä–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π", "–æ—Ç–∂–∏–º–∞–Ω–∏—è"],
    "—Ä—É–∫–∏": ["–±–∏—Ü–µ–ø—Å —Å–æ —à—Ç–∞–Ω–≥–æ–π", "—Ç—Ä–∏—Ü–µ–ø—Å –Ω–∞ –±–ª–æ–∫–µ", "–º–æ–ª–æ—Ç–∫–∏"],
    "–Ω–æ–≥–∏": ["–ø—Ä–∏—Å–µ–¥", "–≤—ã–ø–∞–¥—ã", "—Ä–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥"],
    "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª": ["–±—É—Ä–ø–∏", "–º–µ–¥–±–æ–ª", "–ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞"]
}

WARMUP = ["5 –º–∏–Ω—É—Ç –∫–∞—Ä–¥–∏–æ", "—Ä–∞–∑–º–∏–Ω–∫–∞ —Å—É—Å—Ç–∞–≤–æ–≤", "–ª–µ–≥–∫–∏–π –∫—Ä—É–≥ —Å —Ä–µ–∑–∏–Ω–∫–æ–π"]
CARDIO = ["10 –º–∏–Ω —ç–ª–ª–∏–ø—Å", "10 –º–∏–Ω –±–µ–≥", "5 –º–∏–Ω —Å–∫–∞–∫–∞–ª–∫–∞"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
MENU_KEYBOARD = ReplyKeyboardMarkup([
    [KeyboardButton("üìÖ –î–Ω–∏ –±–µ–∑ —Å—Ç–∏–∫–æ–≤"), KeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")],
    [KeyboardButton("üí∏ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
], resize_keyboard=True)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(DEFAULT_DATA, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. –í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é.",
        reply_markup=MENU_KEYBOARD
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üìÖ –î–Ω–∏ –±–µ–∑ —Å—Ç–∏–∫–æ–≤":
        data = load_data()
        start_date = datetime.fromisoformat(data["start_date_no_iqos"])
        delta = datetime.now(TIMEZONE) - start_date
        await update.message.reply_text(f"–¢—ã —É–∂–µ {delta.days} –¥–Ω–µ–π –±–µ–∑ —Å—Ç–∏–∫–æ–≤ üí™")

    elif text == "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
        await send_training(update, context)

    elif text == "üí∏ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É":
        await update.message.reply_text("–ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –µ–¥–∞")

        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞—Ç
        context.user_data["awaiting_expense"] = True

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await send_stats(update, context)

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Ç—Ä–∞—Ç, –ª–æ–≤–∏–º —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if context.user_data.get("awaiting_expense"):
            await handle_expense_input(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=MENU_KEYBOARD)


async def send_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weekday = datetime.now(TIMEZONE).strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[weekday]

    if weekday_ru not in TRAINING_DAYS:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ üò¥")
        return

    if weekday_ru == "–°—Ä–µ–¥–∞":
        workout_type = "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
    else:
        workout_type = random.choice(["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å", "—Ä—É–∫–∏", "–Ω–æ–≥–∏"])

    workout = random.sample(TRAINING_PLANS[workout_type], k=3)
    warmup = random.choice(WARMUP)
    cardio = random.choice(CARDIO)

    message = (
        f"–°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äì –¥–µ–Ω—å {workout_type.upper()} üí•\n"
        f"–†–∞–∑–º–∏–Ω–∫–∞: {warmup}\n"
        f"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: " + ", ".join(workout) + "\n"
        f"–ö–∞—Ä–¥–∏–æ: {cardio}"
    )
    await update.message.reply_text(message)


async def handle_expense_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–∏—à–∏: —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –µ–¥–∞")
        return

    try:
        amount = float(parts[0].replace(",", "."))
        category = parts[1].strip()
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    data = load_data()
    today_str = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    if today_str not in data["expenses"]:
        data["expenses"][today_str] = []
    data["expenses"][today_str].append({"category": category, "amount": amount})
    save_data(data)

    total = sum(e["amount"] for e in data["expenses"][today_str])
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {category} - {amount} –≥—Ä–Ω. –í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total} –≥—Ä–Ω.", reply_markup=MENU_KEYBOARD)
    context.user_data["awaiting_expense"] = False


async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    today_str = datetime.now(TIMEZONE).strftime("%Y-%m-%d")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_expenses = data["expenses"].get(today_str, [])
    total_today = sum(e["amount"] for e in today_expenses)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_total = 0
    week_categories = {}

    for i in range(7):
        day = (datetime.now(TIMEZONE) - timedelta(days=i)).strftime("%Y-%m-%d")
        day_exp = data["expenses"].get(day, [])
        week_total += sum(e["amount"] for e in day_exp)
        for e in day_exp:
            week_categories[e["category"]] = week_categories.get(e["category"], 0) + e["amount"]

    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n–°–µ–≥–æ–¥–Ω—è: {total_today:.2f} –≥—Ä–Ω\n\n–ó–∞ 7 –¥–Ω–µ–π: {week_total:.2f} –≥—Ä–Ω\n\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, val in week_categories.items():
        msg += f"- {cat}: {val:.2f} –≥—Ä–Ω\n"

    await update.message.reply_text(msg, reply_markup=MENU_KEYBOARD)


# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    weekday = datetime.now(TIMEZONE).strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[weekday]

    if weekday_ru not in TRAINING_DAYS:
        await context.bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ üò¥")
        return

    if weekday_ru == "–°—Ä–µ–¥–∞":
        workout_type = "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
    else:
        workout_type = random.choice(["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å", "—Ä—É–∫–∏", "–Ω–æ–≥–∏"])

    message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è {weekday_ru}. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_type.upper()} üí™"
    await context.bot.send_message(chat_id, message)


async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    context.job_queue.run_daily(daily_reminder, time=datetime.time(REMINDER_HOUR, 0, 0, tzinfo=TIMEZONE), chat_id=chat_id)
    await update.message.reply_text("–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –ø–∏—Å–∞—Ç—å –≤ 8:00 –ø–æ –ö–∏–µ–≤—É.", reply_markup=MENU_KEYBOARD)


def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reminder_on", set_reminder))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_menu))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –≤–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /reminder_on

    app.run_polling()


if __name__ == "__main__":
    main()
