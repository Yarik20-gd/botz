import logging
import os
import random
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å—Ç–∏–∫–æ–≤
START_DATE_NO_IQOS = datetime(2024, 6, 1)

# –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
TRAINING_DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]

TRAINING_PLANS = {
    "—Å–ø–∏–Ω–∞": ["—Ç—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞", "–≥—Ä–µ–±–ª—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ", "–≥–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è"],
    "–≥—Ä—É–¥—å": ["–∂–∏–º –ª–µ–∂–∞", "—Ä–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π", "–æ—Ç–∂–∏–º–∞–Ω–∏—è"],
    "—Ä—É–∫–∏": ["–±–∏—Ü–µ–ø—Å —Å–æ —à—Ç–∞–Ω–≥–æ–π", "—Ç—Ä–∏—Ü–µ–ø—Å –Ω–∞ –±–ª–æ–∫–µ", "–º–æ–ª–æ—Ç–∫–∏"],
    "–Ω–æ–≥–∏": ["–ø—Ä–∏—Å–µ–¥", "–≤—ã–ø–∞–¥—ã", "—Ä–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥"],
    "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª": ["–±—É—Ä–ø–∏", "–º–µ–¥–±–æ–ª", "–ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞"]
}

WARMUP = ["5 –º–∏–Ω—É—Ç –∫–∞—Ä–¥–∏–æ", "—Ä–∞–∑–º–∏–Ω–∫–∞ —Å—É—Å—Ç–∞–≤–æ–≤", "–ª–µ–≥–∫–∏–π –∫—Ä—É–≥ —Å —Ä–µ–∑–∏–Ω–∫–æ–π"]
CARDIO = ["10 –º–∏–Ω —ç–ª–ª–∏–ø—Å", "10 –º–∏–Ω –±–µ–≥", "5 –º–∏–Ω —Å–∫–∞–∫–∞–ª–∫–∞"]

EXPENSES = {}

logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("BOT_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π –±–µ–∑ —Å—Ç–∏–∫–æ–≤.")


async def days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now()
    delta = today - START_DATE_NO_IQOS
    await update.message.reply_text(f"–¢—ã —É–∂–µ {delta.days} –¥–Ω–µ–π –±–µ–∑ —Å—Ç–∏–∫–æ–≤ üí™")


async def training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weekday = datetime.now().strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[weekday]

    if weekday_ru not in TRAINING_DAYS:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ üò¥")
        return

    if weekday_ru == "–°—Ä–µ–¥–∞":
        workout_type = "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
    else:
        workout_type = random.choice(["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å", "—Ä—É–∫–∏", "–Ω–æ–≥–∏"])

    workout = random.sample(TRAINING_PLANS[workout_type], k=3)
    warmup = random.choice(WARMUP)
    cardio = random.choice(CARDIO)

    message = (
        f"–°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äì –¥–µ–Ω—å {workout_type.upper()} üí•\n"
        f"–†–∞–∑–º–∏–Ω–∫–∞: {warmup}\n"
        f"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: " + ", ".join(workout) + "\n"
        f"–ö–∞—Ä–¥–∏–æ: {cardio}"
    )
    await update.message.reply_text(message)


async def spend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = " ".join(context.args)
        if not text:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /spend —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /spend 150 –µ–¥–∞)")
            return

        amount, *reason = text.split()
        amount = float(amount)
        reason = " ".join(reason)
        today_str = datetime.now().strftime("%Y-%m-%d")
        if today_str not in EXPENSES:
            EXPENSES[today_str] = []
        EXPENSES[today_str].append((reason, amount))
        total = sum(x[1] for x in EXPENSES[today_str])
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {reason} - {amount} –≥—Ä–Ω. –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total} –≥—Ä–Ω.")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /spend 100 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")


async def today_spend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today_str = datetime.now().strftime("%Y-%m-%d")
    day_expenses = EXPENSES.get(today_str, [])
    if not day_expenses:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ —Ç—Ä–∞—Ç.")
        return
    message = "\n".join([f"{r} - {a} –≥—Ä–Ω" for r, a in day_expenses])
    total = sum(x[1] for x in day_expenses)
    await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã:\n{message}\n–ò—Ç–æ–≥–æ: {total} –≥—Ä–Ω")


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("days", days))
    app.add_handler(CommandHandler("training", training))
    app.add_handler(CommandHandler("spend", spend))
    app.add_handler(CommandHandler("today", today_spend))

    app.run_polling()


if __name__ == "__main__":
    main()
