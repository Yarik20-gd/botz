import logging
import os
import json
import random
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

logging.basicConfig(level=logging.INFO)

DATA_FILE = "data.json"
TRAININGS_FILE = "trainings.json"
TIMEZONE = ZoneInfo("Europe/Kiev")
REMINDER_HOUR = 8

DEFAULT_DATA = {
    "start_date_no_iqos": None,
    "expenses": {},
    "categories": []
}

MENU = ReplyKeyboardMarkup([
    [KeyboardButton("üìÖ –î–Ω–∏ –±–µ–∑ —Å—Ç–∏–∫–æ–≤"), KeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")],
    [KeyboardButton("üí∏ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")]
], resize_keyboard=True)


def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(DEFAULT_DATA, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for key, val in DEFAULT_DATA.items():
        if key not in data:
            data[key] = val
    return data


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_trainings():
    if not os.path.exists(TRAININGS_FILE):
        return {}
    with open(TRAININGS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_trainings(trainings):
    with open(TRAININGS_FILE, "w", encoding="utf-8") as f:
        json.dump(trainings, f, ensure_ascii=False, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data["start_date_no_iqos"]:
        tomorrow = (datetime.now(TIMEZONE) + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        data["start_date_no_iqos"] = tomorrow.isoformat()
        save_data(data)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å üí™", reply_markup=MENU)


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if context.user_data.get("awaiting_expense"):
        await handle_expense(update, context)
        return

    if context.user_data.get("awaiting_reset"):
        await confirm_reset(update, context)
        return

    if context.user_data.get("awaiting_edit_command"):
        await apply_training_edit(update, context)
        return

    if context.user_data.get("editing"):
        await handle_edit_training(update, context)
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìÖ –î–Ω–∏ –±–µ–∑ —Å—Ç–∏–∫–æ–≤":
        await show_no_iqos(update)

    elif text == "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
        await show_training(update)

    elif text == "üí∏ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø—Ä–∏–º–µ—Ä: `150 –µ–¥–∞`)")
        context.user_data["awaiting_expense"] = True

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update)

    elif text == "üìÅ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_document(InputFile(DATA_FILE))

    elif text == "üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã":
        context.user_data["awaiting_reset"] = True
        await update.message.reply_text("‚ùó –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï —Ç—Ä–∞—Ç—ã? –ù–∞–ø–∏—à–∏ `–î–∞` –∏–ª–∏ `–ù–µ—Ç`")

    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        context.user_data["editing"] = True
        await update.message.reply_text("–ö–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—á–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? (—Å–ø–∏–Ω–∞, –≥—Ä—É–¥—å, —Ä—É–∫–∏, –Ω–æ–≥–∏, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)", reply_markup=ReplyKeyboardRemove())

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é üëá", reply_markup=MENU)


async def show_no_iqos(update: Update):
    data = load_data()
    start = datetime.fromisoformat(data["start_date_no_iqos"])
    now = datetime.now(TIMEZONE)
    delta = now - start
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes = remainder // 60
    if delta.total_seconds() < 0:
        await update.message.reply_text("üìÖ –û—Ç—Å—á–µ—Ç –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ —Å 00:00!")
    else:
        await update.message.reply_text(f"üî• –¢—ã —É–∂–µ {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç –±–µ–∑ —Å—Ç–∏–∫–æ–≤!")


async def handle_edit_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trainings = load_trainings()
    day = update.message.text.strip().lower()
    context.user_data["editing"] = False

    if day not in trainings:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=MENU)
        return

    context.user_data["edit_day"] = day
    reply = "üìã –¢–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"

    if day == "—Ä—É–∫–∏":
        reply += "\n–ü–ª–µ—á–∏:\n" + "\n".join(trainings[day].get("–ø–ª–µ—á–∏", []))
        reply += "\n\n–ë–∏—Ü–µ–ø—Å:\n" + "\n".join(trainings[day].get("–±–∏—Ü–µ–ø—Å", []))
        reply += "\n\n–¢—Ä–∏—Ü–µ–ø—Å:\n" + "\n".join(trainings[day].get("—Ç—Ä–∏—Ü–µ–ø—Å", []))
    elif day == "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª":
        reply += trainings[day].get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    elif day in ["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å"]:
        variants = trainings[day].get("–≤–∞—Ä–∏–∞–Ω—Ç—ã", [])
        for i, v in enumerate(variants):
            reply += f"\n–í–∞—Ä–∏–∞–Ω—Ç {i+1}:\n" + "\n".join(v) + "\n"
    elif day == "–Ω–æ–≥–∏":
        reply += "\n".join(trainings[day].get("—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ", []))

    reply += (
        "\n\n‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n"
        "- –ù–∞–ø–∏—à–∏ `–¥–æ–±–∞–≤–∏—Ç—å: –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ`\n"
        "- –ò–ª–∏ `—É–¥–∞–ª–∏—Ç—å: —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞`\n"
        "–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ä—É–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:\n"
        "`–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ—á–∏: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ`\n"
        "`–¥–æ–±–∞–≤–∏—Ç—å –±–∏—Ü–µ–ø—Å: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ`\n"
        "`–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏—Ü–µ–ø—Å: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ`"
    )
    context.user_data["awaiting_edit_command"] = True
    await update.message.reply_text(reply)


async def apply_training_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_edit_command"):
        return

    trainings = load_trainings()
    day = context.user_data.get("edit_day")
    msg = update.message.text.strip()

    if not day:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω.", reply_markup=MENU)
        context.user_data["awaiting_edit_command"] = False
        return

    if msg.lower().startswith("–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ—á–∏:"):
        item = msg.split("–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ—á–∏:", 1)[1].strip()
        trainings["—Ä—É–∫–∏"]["–ø–ª–µ—á–∏"].append(item)
        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ—á–∏.", reply_markup=MENU)

    elif msg.lower().startswith("–¥–æ–±–∞–≤–∏—Ç—å –±–∏—Ü–µ–ø—Å:"):
        item = msg.split("–¥–æ–±–∞–≤–∏—Ç—å –±–∏—Ü–µ–ø—Å:", 1)[1].strip()
        trainings["—Ä—É–∫–∏"]["–±–∏—Ü–µ–ø—Å"].append(item)
        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∏—Ü–µ–ø—Å.", reply_markup=MENU)

    elif msg.lower().startswith("–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏—Ü–µ–ø—Å:"):
        item = msg.split("–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏—Ü–µ–ø—Å:", 1)[1].strip()
        trainings["—Ä—É–∫–∏"]["—Ç—Ä–∏—Ü–µ–ø—Å"].append(item)
        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä–∏—Ü–µ–ø—Å.", reply_markup=MENU)

    elif msg.lower().startswith("–¥–æ–±–∞–≤–∏—Ç—å:"):
        item = msg[9:].strip()
        if day == "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª":
            trainings[day]["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] += f"\n{item}"
        elif day in ["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å"]:
            if "–≤–∞—Ä–∏–∞–Ω—Ç—ã" in trainings[day] and trainings[day]["–≤–∞—Ä–∏–∞–Ω—Ç—ã"]:
                trainings[day]["–≤–∞—Ä–∏–∞–Ω—Ç—ã"][0].append(item)
        elif day == "–Ω–æ–≥–∏":
            trainings[day]["—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ"].append(item)
        elif day == "—Ä—É–∫–∏":
            await update.message.reply_text("–£–∫–∞–∂–∏, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å: –ø–ª–µ—á–∏, –±–∏—Ü–µ–ø—Å –∏–ª–∏ —Ç—Ä–∏—Ü–µ–ø—Å. –ü—Ä–∏–º–µ—Ä:\n–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ—á–∏: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", reply_markup=MENU)
            return
        await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=MENU)

    elif msg.lower().startswith("—É–¥–∞–ª–∏—Ç—å:"):
        term = msg[8:].strip()
        found = False
        def remove_item(lst): return [x for x in lst if term not in x]

        if day == "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª":
            old = trainings[day]["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
            trainings[day]["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = old.replace(term, "")
            found = old != trainings[day]["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]

        elif day in ["—Å–ø–∏–Ω–∞", "–≥—Ä—É–¥—å"]:
            for i in range(len(trainings[day]["–≤–∞—Ä–∏–∞–Ω—Ç—ã"])):
                old = trainings[day]["–≤–∞—Ä–∏–∞–Ω—Ç—ã"][i]
                new = remove_item(old)
                if old != new:
                    trainings[day]["–≤–∞—Ä–∏–∞–Ω—Ç—ã"][i] = new
                    found = True

        elif day == "–Ω–æ–≥–∏":
            old = trainings[day]["—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ"]
            new = remove_item(old)
            trainings[day]["—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ"] = new
            found = old != new

        elif day == "—Ä—É–∫–∏":
            for key in ["–ø–ª–µ—á–∏", "–±–∏—Ü–µ–ø—Å", "—Ç—Ä–∏—Ü–µ–ø—Å"]:
                old = trainings[day][key]
                new = remove_item(old)
                trainings[day][key] = new
                if old != new:
                    found = True

        if found:
            await update.message.reply_text("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ.", reply_markup=MENU)
        else:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MENU)

    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä:\n"
            "–¥–æ–±–∞–≤–∏—Ç—å: –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n"
            "—É–¥–∞–ª–∏—Ç—å: —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞",
            reply_markup=MENU
        )

    save_trainings(trainings)
    context.user_data["awaiting_edit_command"] = False


async def show_training(update: Update):
    trainings = load_trainings()
    weekday = datetime.now(TIMEZONE).strftime("%A")
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[weekday]

    if weekday_ru == "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":  # –°–ø–∏–Ω–∞
        options = trainings.get("—Å–ø–∏–Ω–∞", {}).get("–≤–∞—Ä–∏–∞–Ω—Ç—ã", [])
        if not options:
            await update.message.reply_text("–ü–ª–∞–Ω—ã —Å–ø–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        variant = random.choice(options)
        msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –°–ü–ò–ù–ê (–≤–∞—Ä–∏–∞–Ω—Ç):\n\n"
        msg += "\n".join(variant)

    elif weekday_ru == "–í—Ç–æ—Ä–Ω–∏–∫":  # –ì—Ä—É–¥—å
        options = trainings.get("–≥—Ä—É–¥—å", {}).get("–≤–∞—Ä–∏–∞–Ω—Ç—ã", [])
        if not options:
            await update.message.reply_text("–ü–ª–∞–Ω—ã –≥—Ä—É–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        variant = random.choice(options)
        msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ì–†–£–î–¨ (–≤–∞—Ä–∏–∞–Ω—Ç):\n\n"
        msg += "\n".join(variant)

    elif weekday_ru == "–°—Ä–µ–¥–∞":  # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        comment = trainings.get("—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", {}).get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç—Ä–µ–Ω–µ—Ä –ª–∏—á–Ω–æ")
        msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äî –§–£–ù–ö–¶–ò–û–ù–ê–õ\n\n{comment}"

    elif weekday_ru == "–ß–µ—Ç–≤–µ—Ä–≥":  # –†—É–∫–∏
        parts = trainings.get("—Ä—É–∫–∏", {})
        if not parts:
            await update.message.reply_text("–ü–ª–∞–Ω—ã —Ä—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        shoulders = parts.get("–ø–ª–µ—á–∏", [])
        biceps = parts.get("–±–∏—Ü–µ–ø—Å", [])
        triceps = parts.get("—Ç—Ä–∏—Ü–µ–ø—Å", [])

        if len(shoulders) < 3 or len(biceps) < 2 or len(triceps) < 2:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ø–ª–∞–Ω–∞—Ö —Ä—É–∫.")
            return

        chosen_shoulders = random.sample(shoulders, 3)
        chosen_biceps = random.sample(biceps, 2)
        chosen_triceps = random.sample(triceps, 2)

        msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –†–£–ö\n\n"
        msg += "–ü–ª–µ—á–∏:\n" + "\n".join(chosen_shoulders) + "\n\n"
        msg += "–ë–∏—Ü–µ–ø—Å:\n" + "\n".join(chosen_biceps) + "\n\n"
        msg += "–¢—Ä–∏—Ü–µ–ø—Å:\n" + "\n".join(chosen_triceps)

    elif weekday_ru == "–ü—è—Ç–Ω–∏—Ü–∞":  # –ù–æ–≥–∏
        legs = trainings.get("–Ω–æ–≥–∏", {}).get("—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ", [])
        if not legs:
            await update.message.reply_text("–ü–ª–∞–Ω—ã –Ω–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è {weekday_ru} ‚Äî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ù–û–ì\n\n"
        msg += "\n".join(legs)

    else:
        msg = "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞! üí§"

    await update.message.reply_text(msg)


async def handle_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    text = update.message.text.strip()
    parts = text.split(maxsplit=1)

    try:
        amount = float(parts[0].replace(",", "."))
        category = parts[1].strip()
    except:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `150 –µ–¥–∞`")
        return

    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data["expenses"].setdefault(today, []).append({"category": category, "amount": amount})

    if category not in data["categories"]:
        data["categories"].append(category)

    save_data(data)
    total = sum(e["amount"] for e in data["expenses"][today])
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {category} ‚Äî {amount} –≥—Ä–Ω\n–ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total} –≥—Ä–Ω", reply_markup=MENU)
    context.user_data["awaiting_expense"] = False


async def show_stats(update: Update):
    data = load_data()
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")

    today_exp = data["expenses"].get(today, [])
    total_today = sum(e["amount"] for e in today_exp)

    last7 = [(datetime.now(TIMEZONE) - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    weekly_total = 0
    cat_totals = {}

    for day in last7:
        for e in data["expenses"].get(day, []):
            weekly_total += e["amount"]
            cat_totals[e["category"]] = cat_totals.get(e["category"], 0) + e["amount"]

    stats = f"üìä –°–µ–≥–æ–¥–Ω—è: {total_today:.2f} –≥—Ä–Ω\nüóìÔ∏è –ó–∞ 7 –¥–Ω–µ–π: {weekly_total:.2f} –≥—Ä–Ω\n\nüîç –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, amt in cat_totals.items():
        stats += f"‚Ä¢ {cat}: {amt:.2f} –≥—Ä–Ω\n"

    await update.message.reply_text(stats, reply_markup=MENU)


async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply = update.message.text.strip().lower()
    if reply == "–¥–∞":
        data = load_data()
        data["expenses"] = {}
        save_data(data)
        await update.message.reply_text("üóëÔ∏è –í—Å–µ —Ç—Ä–∞—Ç—ã –æ–±–Ω—É–ª–µ–Ω—ã!", reply_markup=MENU)
    else:
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞.", reply_markup=MENU)
    context.user_data["awaiting_reset"] = False


def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.")
        return

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_menu))

    app.run_polling()


if __name__ == "__main__":
    main()
